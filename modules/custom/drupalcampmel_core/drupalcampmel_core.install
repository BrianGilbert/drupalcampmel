<?php
/**
 * @file
 * Installation functions for DrupalCampMelbourne: Core feature.
 */

/**
 * Implements hook_install().
 */
function drupalcampmel_core_install() {
  // Configure Node limit modules.
  drupalcampmel_core_install_node_limit();

  // Create the 'Creating a session' bean.
  drupalcampmel_core_install_create_session_bean();
}

/**
 * Configure Node limit modules.
 */
function drupalcampmel_core_install_node_limit() {
  db_insert('node_limit')->fields(array(
    'lid'    => 1,
    'nlimit' => 1,
    'title'  => 'Session limit',
    'weight' => 0,
  ))->execute();
  db_insert('node_limit_type')->fields(array(
    'lid'  => 1,
    'type' => 'session',
  ))->execute();
  db_insert('node_limit_userofrole')->fields(array(
    'lid' => 1,
    'rid' => 2,
  ))->execute();
}

/**
 * Create the 'Creating a session' bean.
 */
function drupalcampmel_core_install_create_session_bean() {
  $bean        = bean_create(array('type' => 'misc'));
  $bean->label = 'Creating a session';
  $bean->title = '';
  $bean->delta = 'creating-session';

  $bean->field_body[LANGUAGE_NONE][0] = array(
    'value'  => '<p>Please note that only one session per attendee can be created, but you are free to edit you proposed session as much as needed.</p><p>On the first day of DrupalCampMelbourne all attendees will be encouraged to give a short (1-2 minutes) lightning talk about their proposed session, giving each attendee a chance to both promote their talk and vote on the talks they wish to attend during the day.</p>',
    'format' => 'full_html',
  );

  $bean->field_block_class[LANGUAGE_NONE][0]['value'] = 'panel-info';

  $bean->save();
}

/**
 * Enable dependencies, flush caches and revert the feature.
 */
function drupalcampmel_core_update_7101() {
  _drupalcampmel_core_flush_revert();
}

/**
 * Enable dependencies, flush caches and revert the feature, configure Node
 * limit modules, create the 'Creating a session' bean and turn
 * 'register_interest' submissions into users.
 */
function drupalcampmel_core_update_7102() {
  // Enable dependencies, flush caches and revert the feature.
  _drupalcampmel_core_flush_revert();

  // Configure Node limit modules.
  drupalcampmel_core_install_node_limit();

  // Create the 'Creating a session' bean.
  drupalcampmel_core_install_create_session_bean();

  // Turn 'register_interest' submissions into users.
  $query  = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'entityform')
    ->entityCondition('bundle', 'register_interest')
    ->execute();
  if (!empty($result['entityform'])) {
    $entities = entityform_load_multiple(array_keys($result['entityform']));
    foreach ($entities as $entity) {
      if ('stuart@realityloop.com' == $entity->field_email_address[LANGUAGE_NONE][0]['email']) {
        rules_invoke_component('rules_signup_create_notify_user', $entity);
      }
    }
  }
}

/**
 * Helper function; Enable dependencies, flush caches and revert the feature.
 */
function _drupalcampmel_core_flush_revert() {
  if (empty($modules)) {
    $modules = basename(__FILE__, '.install');
  }
  if (!is_array($modules)) {
    $modules = array($modules);
  }

  $revert = array();
  foreach ($modules as $module) {
    $info = system_get_info('module', $module);

    // Enable all dependencies.
    module_enable($info['dependencies']);

    // Forcefully clear Features caches.
    module_load_include('inc', 'features', 'features.export');
    foreach (array_keys($info['features']) as $component) {
      features_get_components($component, NULL, TRUE);
      features_include_defaults($component, TRUE);
      features_get_default($component, $module, TRUE, TRUE);
    }

    // Revert all feature components except for 'OAuth Connector providers'.
    unset($info['features']['oauthconnector_provider']);

    // Build components list for feature revert.
    $revert[$module] = array_keys($info['features']);
  }

  // Flush Prepro cache.
  cache_clear_all('prepro:map', 'cache_prepro');

  // Flush all standard Drupal caches.
  drupal_flush_all_caches();

  features_revert($revert);
}
